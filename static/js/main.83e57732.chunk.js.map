{"version":3,"sources":["component/weather.component.jsx","component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","id","type","name","autoComplete","placeholder","icon","faSearch","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","celsius","calCelsius","main","temp","weather","get_WeatherIcon","state","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.83e57732.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = props =>{\r\n\treturn(\r\n\t\t<div className=\"container text-light\">\r\n\t\t\t<div className=\"cards pt-4\">\r\n\t\t\t\t<h1>\r\n\t\t\t\t\t{props.city}\r\n\t\t\t\t</h1>\r\n\t\t\t\t<h5 className=\"py-4\">\r\n\t\t\t\t\t<i className={`wi ${props.weatherIcon} display-1`} />\r\n\t\t\t\t</h5>\r\n\t\t\t\t{ props.temp_celsius?(<h1 className=\"py-2\">\r\n\t\t\t\t\t{props.temp_celsius}&deg;\r\n\t\t\t\t</h1>):null}\r\n\r\n\t\t\t\t{/** show max and min temp*/}\r\n\t\t\t\t{minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n\t\t\t\t<h4 className=\"py-3\">\r\n\t\t\t\t\t{props.description}\r\n\t\t\t\t</h4>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n function minmaxTemp(min, max){\r\n\tif(min && max){\r\n\t\treturn(\r\n\t\t\t<h3>\r\n\t\t\t \t<span className=\"px-4\">{min}&deg;</span>\r\n\t\t\t \t<span className=\"px-4\">{max}&deg;</span>\r\n\t\t \t</h3>\r\n\t\t);\r\n\t}\r\n }\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4 offset-md-4\" id=\"\">\r\n                        <div className=\"row\">\r\n                            <input type=\"text\" className=\"corm-control col-md-9\" name=\"city\" autoComplete=\"off\" placeholder=\"City\" />\r\n                            <button className=\"btn btn-default text-light bg-dark col-md-2\" id=\"btn\" id=\"btn\"><FontAwesomeIcon icon={faSearch} /></button>\r\n                        </div>                       \r\n                    </div>                   \r\n                </div>\r\n            </form>    \r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\n\n\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './component/weather.component';\nimport { render } from '@testing-library/react';\nimport Form from './component/form.component';\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_key = \"805ea0e0782759c817dd9e07172d332e\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city:undefined,\n      icon: undefined,\n      min:undefined,\n      celsius: undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description: \"\",\n      error:false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp-273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeID>=300 && rangeID <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeID>=500 && rangeID <= 531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeID>=600 && rangeID <= 622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeID>=701 && rangeID <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeID===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeID>=801 && rangeID <= 804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n        default:\n          this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async(e) =>{\n\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    \n\n    if(city){\n\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`);\n\n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n        city:`${response.name}`,\n        celsius:this.calCelsius(response.main.temp),\n        temp_max:this.calCelsius(response.main.temp_max),\n        temp_min:this.calCelsius(response.main.temp_min),\n        description:response.weather[0].description,\n        error: false\n      });\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n    }else{\n      this.setState({error:true});\n    }\n  };\n \n\n\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather \n        city={this.state.city} \n        temp_celsius={this.state.celsius} \n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon= {this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}